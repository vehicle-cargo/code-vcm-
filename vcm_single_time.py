import pandas as pd

import vcm_change

# 初始化车辆队列
cargo_queue = {
    1: ['日用百货', 5000, 30, 6, [108.322574, 22.833533], [113.263955, 23.154211], '广西壮族自治区南宁市',
        '广东省广州市', [2023051212, 2023052516]],
    2: ['特殊货物', 7000, 40, 14, [109.395618, 24.315365], [113.263955, 23.154211], '广西壮族自治区柳州市',
        '广东省广州市', [2023051209, 2023052315]],
    3: ['特殊货物', 5000, 35, 14, [108.322574, 22.833533], [113.263955, 23.154211], '广西壮族自治区南宁市',
        '广东省广州市', [2023051109, 2023052512]],
    4: ['日用百货', 8000, 55, 8, [110.28662, 25.267723], [108.322574, 22.833533], '广西壮族自治区桂林市',
        '广西壮族自治区南宁市', [2023051209, 2023052216]],
    5: ['日用百货', 5000, 50, 16, [109.395618, 24.315365], [113.263955, 22.833533], '广西壮族自治区柳州市',
        '广东省佛山市', [2023051109, 2023052314]],
    6: ['机器零件', 10000, 50, 12, [113.25872, 23.139562], [113.51597, 22.292177], '广东省广州市', '广东省珠海市',
        [2023051209, 2023052016]],
    7: ['生鲜果蔬', 6500, 30, 15, [113.25872, 23.139562], [114.051164, 22.609383], '广东省广州市', '广东省深圳市',
        [2023051109, 2023052114]],
    8: ['砂石散货', 10000, 50, 5, [113.263955, 23.154211], [110.28662, 25.267723], '广东省广州市',
        '广西壮族自治区桂林市', [2023050708, 2023051915]],
    9: ['五金机械', 8000, 40, 14, [108.322574, 22.833533], [113.263955, 23.154211], '广西壮族自治区南宁市',
        '广东省广州市', [2023051109, 2023051814]],
    10: ['日用百货', 6000, 45, 15, [116.425052, 39.934032], [113.51597, 22.292177], '北京市东城区', '广东省珠海市',
         [2023051209, 2023051815]],
    11: ['特殊货物', 7000, 40, 6, [113.104074, 36.215097], [116.425052, 39.934032], '山西省长治市', '北京市东城区',
         [2023050612, 2023052616]],
    12: ['生鲜果蔬', 6500, 30, 10, [116.425052, 39.934032], [113.51597, 22.292177], '北京市东城区', '广东省珠海市',
         [2023051209, 2023051815]],
    13: ['机器零件', 10000, 50, 11, [112.85052, 35.493965], [116.425052, 39.934032], '山西省晋城市', '北京市东城区',
         [2023050908, 2023052515]],
    14: ['生鲜果蔬', 6500, 30, 11, [113.362213, 40.097111], [116.425052, 39.934032], '山西省大同市', '北京市东城区',
         [2023050612, 2023052616]],
    15: ['特殊货物', 7000, 40, 8, [113.25872, 23.139562], [104.060293, 30.593689], '广东省广州市', '四川省成都市',
         [2023051209, 2023051815]],
    16: ['五金机械', 8000, 40, 15, [106.535893, 29.590094], [104.060293, 30.593689], '重庆市渝北区', '四川省成都市',
         [2023050812, 2023052516]],
    17: ['生鲜果蔬', 6500, 30, 11, [111.019703, 35.033296], [103.839542, 36.071046], '山西省运城市', '甘肃省兰州市',
         [2023050908, 2023052515]],
    18: ['机器零件', 10000, 50, 10, [113.104074, 36.215097], [112.544412, 37.881898], '山西省长治市', '山西省太原市',
         [2023050612, 2023052616]],
    19: ['日用百货', 6000, 45, 15, [117.208789, 39.095388], [113.25872, 23.139562], '天津市河西区', '广东省广州市',
         [2023050812, 2023052516]],
    20: ['砂石散货', 10000, 50, 8, [113.104074, 36.215097], [116.425052, 39.934032], '山西省长治市', '北京市东城区',
         [2023050710, 2023051012]],
    21: ['砂石散货', 5800, 50, 9, [111.019703, 35.033296], [103.839542, 36.071046], '山西省运城市', '甘肃省兰州市',
         [2023050709, 2023051915]],
    22: ['生鲜果蔬', 6500, 30, 12, [113.434202, 22.519376], [108.655118, 22.060841], '广东省中山市',
         '广西壮族自治区钦州市', [2023051209, 2023051815]],
    23: ['机器零件', 10000, 50, 11, [113.263955, 23.154211], [108.322574, 22.833533], '广东省广州市',
         '广西壮族自治区南宁市', [2023051209, 2023051815]],
    24: ['五金机械', 8000, 40, 15, [106.535893, 29.590094], [104.060293, 30.593689], '重庆市渝北区', '四川省成都市',
         [2023050710, 2023051012]],
    25: ['生鲜果蔬', 6500, 30, 11, [109.395618, 24.315365], [113.263955, 23.154211], '广西壮族自治区柳州市',
         '广东省广州市', [2023050708, 2023052215]],
    26: ['日用百货', 6000, 45, 14, [117.208789, 39.095388], [113.25872, 23.139562], '天津市河西区', '广东省广州市',
         [2023051209, 2023051815]],
    27: ['砂石散货', 5500, 50, 10, [113.104074, 36.215097], [116.425052, 39.934032], '山西省长治市', '北京市东城区',
         [2023050709, 2023051915]],
    28: ['生鲜果蔬', 6500, 30, 14, [113.263955, 23.154211], [108.322574, 22.833533], '广东省广州市',
         '广西壮族自治区南宁市', [2023051109, 2023052512]],
    29: ['日用百货', 5000, 30, 14, [106.535893, 29.590094], [104.060293, 30.593689], '重庆市渝北区', '四川省成都市',
         [2023050708, 2023052215]],

}
# 初始化货物队列
vehicle_queue = {
    1: ['冷藏车', 7000, 75, 18, [113.25872, 23.139562], [114.051164, 22.609383], '广东省广州市', '广东省深圳市',
        [2023050708, 2023052215]],
    2: ['平板车', 15000, 50, 18, [113.25872, 23.139562], [113.51597, 22.292177], '广东省广州市', '广东省珠海市',
        [2023050812, 2023052516]],
    3: ['低栏车', 10000, 45, 19, [112.544412, 37.881898], [113.104074, 36.215097], '山西省太原市', '山西省长治市',
        [2023050612, 2023052616]],
    4: ['高栏车', 8500, 80, 10,[113.104074, 36.215097], [112.544412, 37.881898], '山西省长治市', '山西省太原市',
        [2023050812, 2023052516]],
    5: ['通风箱车', 11000, 80, 8, [112.544412, 37.881898], [112.85052, 35.493965], '山西省太原市', '山西省晋城市',
        [2023050708, 2023052215]],
    6: ['高栏车', 8500, 80, 10,[113.104074, 36.215097], [116.425052, 39.934032], '山西省长治市', '北京市东城区',
        [2023050608, 2023051416]],
    7: ['厢式车', 6000, 70, 17, [113.104074, 36.215097], [116.425052, 39.934032], '山西省长治市', '北京市东城区',
        [2023050708, 2023052215]],
    8: ['低栏车', 11000, 50, 18, [113.104074, 36.215097], [117.208789, 39.095388], '山西省长治市', '天津市河西区',
        [2023050608, 2023051416]],
    9: ['高栏车', 8500, 80, 13, [112.85052, 35.493965], [116.425052, 39.934032], '山西省晋城市', '北京市东城区',
        [2023050612, 2023052616]],
    10: ['通风箱车', 11000, 80, 9, [112.85052, 35.493965], [117.208789, 39.095388], '山西省晋城市', '天津市河西区',
         [2023050508, 2023052015]],
    11: ['低栏车', 11000, 50, 17, [108.322574, 22.833533], [113.263955, 23.154211], '广西壮族自治区南宁市',
         '广东省广州市', [2023050709, 2023051915]],
    12: ['高栏车', 8500, 80, 13, [113.263955, 23.154211], [108.322574, 22.833533], '广东省广州市',
         '广西壮族自治区南宁市', [2023050812, 2023052516]],
    13: ['厢式车', 8000, 80, 15, [108.322574, 22.833533], [114.420973, 23.159162], '广西壮族自治区南宁市',
         '广东省惠州市', [2023050710, 2023051012]],
    14: ['冷藏车', 7000, 75, 16, [108.322574, 22.833533], [112.476087, 23.080553], '广西壮族自治区南宁市',
         '广东省肇庆市', [2023050908, 2023051512]],
    15: ['通风箱车', 11000, 80, 9, [109.395618, 24.315365], [113.263955, 23.154211], '广西壮族自治区柳州市',
         '广东省广州市', [2023050708, 2023052215]],
    16: ['高栏车', 8500, 60, 13, [116.425052, 39.934032], [117.208789, 39.095388], '北京市东城区', '天津市河西区',
         [2023050612, 2023052616]],
    17: ['低栏车', 11000, 50, 14, [113.25872, 23.139562], [114.051164, 22.609383], '广东省广州市', '广东省深圳市',
         [2023050812, 2023052516]],
    18: ['厢式车', 7000, 75, 15, [106.535893, 29.590094], [104.060293, 30.593689], '重庆市渝北区', '四川省成都市',
         [2023051108, 2023052115]],
    19: ['高栏车', 8500, 80, 13, [113.25872, 23.139562], [104.060293, 30.593689], '广东省广州市', '四川省成都市',
         [2023050612, 2023052616]],
    20: ['厢式车', 7000, 75, 15, [112.544412, 37.881898], [112.85052, 35.493965], '山西省太原市', '山西省晋城市',
         [2023051308, 2023052215]],
    21: ['冷藏车', 7000, 75, 17, [106.535893, 29.590094], [104.060293, 30.593689], '重庆市渝北区', '四川省成都市',
         [2023050812, 2023052516]],
    22: ['厢式车', 7000, 75, 15, [113.362213, 40.097111], [116.425052, 39.934032], '山西省大同市', '北京市东城区',
         [2023050616, 2023052116]],
    23: ['通风箱车', 11000, 80, 10, [113.362213, 40.097111], [104.060293, 30.593689], '山西省大同市',
         '四川省成都市', [2023051008, 2023051715]],
    24: ['高栏车', 8500, 80, 13, [111.019703, 35.033296], [103.839542, 36.071046], '山西省运城市', '甘肃省兰州市',
         [2023050612, 2023052616]],
    25: ['低栏车', 11000, 50, 18, [117.208789, 39.095388], [113.25872, 23.139562], '天津市河西区', '广东省广州市',
         [2023050908, 2023052515]],
    26: ['厢式车', 6000, 70, 16, [113.263955, 23.154211], [110.28662, 25.267723], '广东省广州市',
         '广西壮族自治区桂林市', [2023050616, 2023052116]],
    27: ['低栏车', 11000, 50, 15, [113.434202, 22.519376], [108.655118, 22.060841], '广东省中山市',
         '广西壮族自治区钦州市', [2023050608, 2023051416]],
    28: ['高栏车', 8500, 80, 11, [113.263955, 23.154211], [110.28662, 25.267723], '广东省广州市',
         '广西壮族自治区桂林市', [2023050612, 2023052616]],
    29: ['平板车', 12000, 40, 15, [116.425052, 39.934032], [113.51597, 22.292177], '北京市东城区', '广东省珠海市',
         [2023050708, 2023052215]],

}
# 匹配成功的车辆队列
vehicle_success_queue = {}
# 匹配成功的货物队列
cargo_success_queue = {}
# 类型匹配度
type_match_list = [['低栏车', '日用百货', 0.8], ['低栏车', '特殊货物', 0.3], ['低栏车', '机器零件', 1],
                   ['低栏车', '生鲜果蔬', 0.5],
                   ['低栏车', '砂石散货', 0.8], ['低栏车', '五金机械', 1],
                   ['高栏车', '日用百货', 0.8], ['高栏车', '特殊货物', 0.5], ['高栏车', '机器零件', 1],
                   ['高栏车', '生鲜果蔬', 0.5],
                   ['高栏车', '砂石散货', 1], ['高栏车', '五金机械', 1],

                   ['厢式车', '日用百货', 1], ['厢式车', '特殊货物', 0.8], ['厢式车', '机器零件', 1],
                   ['厢式车', '生鲜果蔬', 0.5],
                   ['厢式车', '砂石散货', 0.8], ['厢式车', '五金机械', 1],
                   ['冷藏车', '日用百货', 0.1], ['冷藏车', '特殊货物', 0.1], ['冷藏车', '机器零件', 0.1],
                   ['冷藏车', '生鲜果蔬', 1],
                   ['冷藏车', '砂石散货', 0.1], ['冷藏车', '五金机械', 0.1],
                   ['通风箱车', '日用百货', 0.8], ['通风箱车', '特殊货物', 0.5], ['通风箱车', '机器零件', 0.8],
                   ['通风箱车', '生鲜果蔬', 1],
                   ['通风箱车', '砂石散货', 0.5], ['通风箱车', '五金机械', 0.8],
                   ['平板车', '日用百货', 0.6], ['平板车', '特殊货物', 0.6], ['平板车', '机器零件', 0.8],
                   ['平板车', '生鲜果蔬', 0.6],
                   ['平板车', '砂石散货', 0.5], ['平板车', '五金机械', 0.8]]
vehicle_prior = vcm_change.vehicleAttrDis(vehicle_queue)
cargo_prior = vcm_change.cargoAttrDis(cargo_queue)
print('车辆先验概率：', vehicle_prior)
print('货物先验概率：', cargo_prior)

# 存放每个时刻所有成功的几率，每一项都是pd.dataFrame
vcm_success_all = []
# 将n辆车，m个货物得到的m*n个概率值转化为DataFrame. 分别是pd.DataFrame的列索引，行索引，值
vcm_pro_column = []
vcm_pro_row = []
vcm_pro_value = []
# 得到此时队列中的车辆的索引
for vehicleKey, vehicleValue in vehicle_queue.items():
    vcm_pro_row.append(vehicleKey)
# 得到此时队列中的货物的索引
for cargoKey, cargoValue in cargo_queue.items():
    vcm_pro_column.append(cargoKey)
# 将值初始化
vcm_pro_value = [[] for i in vcm_pro_row]

# 得到每辆车和每个货相匹配的概率值
i = 0
for vehicleKey, vehicleValue in vehicle_queue.items():
    vcm_pro_value[i] = []
    for cargoKey, cargoValue in cargo_queue.items():
        attrMatch = vcm_change.VCM(vehicleValue, cargoValue)
        if attrMatch == 0:
            finalMatch = 0
        else:
            # finalMatch = (attrMatch * vehicle_prior[m]) / cargo_prior[n]
            finalMatch = 0.75 * attrMatch + (0.25 * vehicle_prior[vehicleKey - 1]) / (1 - cargo_prior[cargoKey - 1])
        # finalMatch = (attrMatch * vehicle_prior[vehicleKey - 1]) / cargo_prior[cargoKey - 1]
        print(round(finalMatch, 2), end=" ")
        vcm_pro_value[i].append(round(finalMatch, 2))
    i = i + 1
    print()
# 将列表转化为dataFrame
value_df = pd.DataFrame(vcm_pro_value, columns=vcm_pro_column, index=vcm_pro_row)
print(value_df)
vcm_success_all.append(value_df)
# 0.49
# # 某时刻匹配概率  得到所有概率之和 与 概率非0 的个数，求得平均值
# vcm_pro_sum = 0
# vcm_pro_notZero_num = 0
# vcm_pro_mean = 0
# for value in vcm_pro_value:
#     vcm_pro_sum += sum(value)
# for value in vcm_pro_value:
#     for i in value:
#         if i != 0:
#             vcm_pro_notZero_num += 1
# vcm_pro_mean = vcm_pro_sum / vcm_pro_notZero_num
# print('概率均值：', vcm_pro_mean)

# 成功队列AND失败队列
success_queue = []
fail_vehicle_queue = []
fail_cargo_queue = []
rowIndex = 0
columnIndex = 0

for index, row in value_df.iterrows():
    rowIndex = index
    # 更新某一行
    row = value_df.loc[rowIndex, :]
    for i, j in row.items():
        if max(row) == j:
            columnIndex = i
            break
    if max(row) >= 0.49:
        success_vcm = [rowIndex, columnIndex, max(row)]
        success_queue.append(success_vcm)
        value_df.loc[:, columnIndex] = -1
    # print(value_df)

print('车货匹配成功的列表：', success_queue)

# 存放车辆，货物队列中所有的的编号
vehicle_num_list = []
cargo_num_list = []
for key, value in vehicle_queue.items():
    vehicle_num_list.append(key)
for key, value in cargo_queue.items():
    cargo_num_list.append(key)

# 匹配成功的车辆、货物编号集合
success_vehicle_num = []
success_cargo_num = []
for success in success_queue:
    success_vehicle_num.append(success[0])
    success_cargo_num.append(success[1])
print('匹配成功的车辆编号集合：', success_vehicle_num, '，匹配成功的货物编号集合：', success_cargo_num)

fail_vehicle_num = [item for item in vehicle_num_list if item not in success_vehicle_num]
fail_cargo_num = [item for item in cargo_num_list if item not in success_cargo_num]
print('匹配失败的车辆编号集合：', fail_vehicle_num, '，匹配失败的货物编号集合：', fail_cargo_num)

